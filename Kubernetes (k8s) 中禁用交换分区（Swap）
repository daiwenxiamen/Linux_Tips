在 Kubernetes (k8s) 中禁用交换分区（Swap）是官方明确建议的配置要求，主要原因与 Kubernetes 的设计哲学、资源管理机制以及稳定性保障直接相关。以下是具体原因和注意事项：

1. Kubernetes 的资源管理依赖确定性
内存 limits 的强制保证：
Kubernetes 通过 kubelet 管理的 Pod 可以设置内存请求（requests）和限制（limits）。如果节点启用 Swap，当物理内存不足时，系统会将部分内存页交换到磁盘（Swap），导致：

性能急剧下降：磁盘 I/O 速度远低于内存，可能引发 Pod 响应延迟，甚至雪崩效应。

资源统计失真：kubelet 无法准确判断 Pod 实际占用的物理内存量，可能误判节点资源状态，导致调度器（Scheduler）错误地将新 Pod 分配到已超负荷的节点。

设计初衷：
Kubernetes 假设节点资源（CPU/内存）是不可压缩的。内存不足时，它期望通过 OOM Killer（内存溢出杀手）直接终止超限的 Pod，而非依赖 Swap 的“缓冲”。这种设计确保集群行为可预测，便于故障排查和自动化恢复。

2. 性能与稳定性问题
容器化环境的特殊性：
容器本身通过 Linux Cgroups 隔离资源，而 Swap 的存在会打破这种隔离：

Cgroups v1 的缺陷：早期版本的 Cgroups 对 Swap 支持不完善，可能导致 Swap 使用量无法被正确统计或限制。

随机延迟：交换操作可能影响同一节点上其他容器的性能（如数据库类 Pod 对延迟敏感）。

kubelet 的默认行为：
从 Kubernetes 1.8 开始，如果节点启用 Swap，kubelet 会默认拒绝启动（除非显式配置参数 --fail-swap-on=false，但官方强烈不建议）。

3. 安全与一致性风险
敏感数据泄漏：
Swap 中可能残留容器进程的敏感信息（如密钥），若未加密，可能被恶意程序读取。

跨环境不一致：
开发/测试环境启用 Swap 而生产环境禁用，可能导致应用在内存压力下表现不一致，引发隐蔽的线上故障。

如何禁用 Swap
临时禁用（重启后失效）
bash
swapoff -a  # 关闭所有 Swap 分区
永久禁用
注释掉 /etc/fstab 中所有含 swap 的行：

bash
sed -i '/swap/s/^/#/' /etc/fstab
删除 Swap 的挂载项（可选）：

bash
systemctl mask swap.target
验证
bash
free -h  # 查看 Swap 行是否显示 0
swapon --show  # 无输出表示已禁用
特殊情况处理
无法禁用 Swap 的场景（如某些公有云实例）：
可通过 kubelet 参数容忍 Swap，但需承担上述风险：

bash
--fail-swap-on=false --kubelet-extra-args="--fail-swap-on=false"
需同步配置 --memory-swap=-1 限制容器使用 Swap（需容器运行时支持）。

Swap 的替代方案：
若仍需内存扩展能力，可考虑：

增加节点物理内存。

使用 Kubernetes 的 Horizontal Pod Autoscaler (HPA) 自动扩容 Pod 实例数。

总结
禁用 Swap	启用 Swap
✅ 资源管理准确	❌ 内存统计失真，调度不可靠
✅ 性能稳定（无磁盘 I/O 抖动）	❌ 随机延迟，尤其影响低延迟应用
✅ 符合 Kubernetes 设计原则	❌ 需额外配置且官方不支持
生产环境中，禁用 Swap 是确保 Kubernetes 集群可靠性和性能的最佳实践。
